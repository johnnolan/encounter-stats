[{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\chat-message.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11,14],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11,14],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"(global as any).ChatMessage = {\n  create: jest.fn().mockResolvedValue(null),\n  getWhisperRecipients: () => {\n    return [{ _id: \"\" }];\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11,14],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11,14],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"(global as any).CONFIG = {\n  RollTable: {\n    resultTemplate: \"<div>test</div>\",\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\const.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11,14],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11,14],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"(global as any).CONST = {\n  CHAT_MESSAGE_TYPES: {\n    WHISPER: \"WHISPER\",\n    ROLL: \"ROLL\",\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\game.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_permission' is defined but never used.","line":12,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_permission' is defined but never used.","line":15,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_role' is defined but never used.","line":18,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_role' is defined but never used.","line":21,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_moduleName' is defined but never used.","line":43,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_settingName' is defined but never used.","line":43,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_data' is defined but never used.","line":43,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_moduleName' is defined but never used.","line":47,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[992,995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[992,995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_settingName' is defined but never used.","line":47,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1011,1014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1011,1014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_data' is defined but never used.","line":47,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1023,1026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1023,1026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1468,1471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1468,1471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1565,1568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1565,1568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1642,1645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1642,1645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1710,1713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1710,1713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1911,1914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1911,1914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_obj' is defined but never used.","line":97,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1922,1925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1922,1925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2415,2418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2415,2418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2520,2523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2520,2523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2770,2773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2770,2773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2964,2967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2964,2967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const user = {\n  name: \"\",\n  id: \"\",\n  active: true,\n  viewedScene: \"\",\n  avatar: \"\",\n  permissions: [],\n  isTrusted: false,\n  isGM: false,\n  isSelf: true,\n  data: {},\n  can: jest.fn((_permission) => {\n    return false;\n  }),\n  hasPermission: jest.fn((_permission) => {\n    return false;\n  }),\n  hasRole: jest.fn((_role) => {\n    return true;\n  }),\n  isRole: jest.fn((_role) => {\n    return false;\n  }),\n};\n\n// @ts-expect-error TS(2451): Cannot redeclare block-scoped variable 'game'.\nconst game = {\n  data: null,\n  user: user,\n  paused: true,\n  tables: [\n    {\n      name: \"Wild Magic Surge\",\n      roll: jest.fn().mockResolvedValue(true),\n      results: jest.fn().mockResolvedValue([]),\n    },\n  ],\n  i18n: {\n    format: jest.fn().mockResolvedValue(\"test language string\"),\n  },\n  settings: {\n    get: jest.fn().mockResolvedValue(\"true\"),\n    register: jest.fn((_moduleName, _settingName, _data) => {\n      // This is intentional\n    }),\n    registerMenu: jest.fn(),\n    set: (_moduleName: any, _settingName: any, _data: any) => {\n      return Promise.resolve(true);\n    },\n  },\n  time: {\n    worldTime: 10,\n    advance: jest.fn(),\n  },\n  socket: {\n    on: jest.fn(),\n    emit: jest.fn(),\n  },\n  combats: {\n    size: 0,\n    find: jest.fn((v) => {\n      return v.call(undefined, { started: true });\n    }),\n  },\n  modules: {\n    get: jest.fn(),\n  },\n  Gametime: {\n    DTC: {\n      saveUserCalendar: jest.fn(),\n    },\n  },\n  users: {\n    get: jest.fn(),\n    find: (v: any) => {\n      return v.call(undefined, { isGM: false, active: true });\n    },\n    forEach: (v: any) => {\n      return v.call(undefined, { id: \"\" });\n    },\n    filter: (v: any) => {\n      return v.call(undefined, user);\n    },\n    map: (v: any) => {\n      return v.call(undefined, user);\n    },\n  },\n  scenes: null,\n  system: {\n    id: \"\",\n    data: {\n      version: \"1.2.3\",\n    },\n  },\n  togglePause: jest.fn(),\n  journal: {\n    get: (id: any, _obj: any) => {\n      if (id) {\n        return {\n          getFlag: jest.fn().mockReturnValue({\n            calendarId: \"test\",\n            startDate: {},\n            endDate: {},\n            allDay: true,\n            repeats: 0,\n            order: 0,\n            categories: [],\n            remindUsers: [\"qwe\"],\n          }),\n          update: jest.fn(),\n          delete: async () => {\n            // This is intentional\n          },\n        };\n      }\n      return null;\n    },\n    forEach: (v: any) => {\n      return v.call(undefined, {});\n    },\n    directory: {\n      folders: {\n        find: (v: any) => {\n          return v.call(undefined, {\n            getFlag: jest\n              .fn()\n              .mockReturnValueOnce(undefined)\n              .mockReturnValue({}),\n          });\n        },\n      },\n    },\n  },\n  macros: {\n    forEach: (v: any) => {\n      return v.call(undefined, { canExecute: true, name: \"asd\", id: \"123\" });\n    },\n    get: () => {\n      return { canExecute: true, execute: jest.fn() };\n    },\n  },\n};\n\n(global as any).game = game;\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\hasProperty.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\jquery.ts","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":15,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43,46],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43,46],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":38}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const jsdom = require(\"jsdom\");\n(global as any).$ = require(\"jquery\")(new jsdom.JSDOM().window);\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\renderTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\roll.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11,14],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11,14],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"(global as any).Roll = jest.fn().mockImplementation(() => {\n  return {\n    roll: jest.fn().mockResolvedValue(null),\n    create: jest.fn().mockResolvedValue(null),\n    render: jest.fn().mockResolvedValue(null),\n  };\n});\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\textEditor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11,14],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11,14],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"(global as any).TextEditor = {\n  enrichHTML: jest.fn().mockResolvedValue(\"Test Description\"),\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\__mocks__\\ui.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11,14],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11,14],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":4,"column":4,"nodeType":null,"messageId":"insert","endLine":4,"endColumn":4,"fix":{"range":[66,66],"text":","}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"(global as any).ui = {\n  notifications: {\n    info: jest.fn(),\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\build.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\CampaignManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EncounterJournal' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎······.GetCurrentDateToString()⏎······.replace(/·/g,·\"\"` with `.GetCurrentDateToString().replace(⏎······/·/g,⏎······\"\"⏎····`","line":11,"column":42,"nodeType":null,"messageId":"replace","endLine":13,"endColumn":24,"fix":{"range":[411,467],"text":".GetCurrentDateToString().replace(\n      / /g,\n      \"\"\n    "}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":15,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":15,"endColumn":10,"fix":{"range":[487,520],"text":"const d = new Date().toISOString();"}},{"ruleId":"prefer-const","severity":2,"message":"'d' is never reassigned. Use 'const' instead.","line":28,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":28,"endColumn":10,"fix":{"range":[779,812],"text":"const d = new Date().toISOString();"}},{"ruleId":"prefer-const","severity":2,"message":"'article' is never reassigned. Use 'const' instead.","line":35,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":35,"endColumn":14,"fix":{"range":[910,955],"text":"const article = await GetCampaignDataArticle();"}},{"ruleId":"prefer-const","severity":2,"message":"'content' is never reassigned. Use 'const' instead.","line":36,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":36,"endColumn":14,"fix":{"range":[958,1032],"text":"const content = article.data.content.replace(\"<p>\", \"\").replace(\"</p>\", \"\");"}},{"ruleId":"prefer-const","severity":2,"message":"'article' is never reassigned. Use 'const' instead.","line":41,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":41,"endColumn":14,"fix":{"range":[1110,1155],"text":"const article = await GetCampaignDataArticle();"}},{"ruleId":"prefer-const","severity":2,"message":"'campaignArticle' is never reassigned. Use 'const' instead.","line":46,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":46,"endColumn":22,"fix":{"range":[1247,1296],"text":"const campaignArticle = await GetCampaignArticle();"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":54,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":54,"endColumn":11,"fix":{"range":[1446,1481],"text":"const data = await _getDataArticle();"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":72,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":72,"endColumn":11,"fix":{"range":[1832,1867],"text":"const data = await _getDataArticle();"}},{"ruleId":"prefer-const","severity":2,"message":"'data' is never reassigned. Use 'const' instead.","line":90,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":90,"endColumn":11,"fix":{"range":[2203,2238],"text":"const data = await _getDataArticle();"}},{"ruleId":"prefer-const","severity":2,"message":"'currentEncounterStats' is never reassigned. Use 'const' instead.","line":92,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":92,"endColumn":28,"fix":{"range":[2242,2308],"text":"const currentEncounterStats = GetItemFromLocalStorage(STORAGE_NAME);"}}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":11,"fixableWarningCount":0,"source":"import { STORAGE_NAME } from \"./Settings\";\nimport { GetItemFromLocalStorage } from \"./LocalStorage\";\nimport { Generate } from \"./CampaignTemplate\";\nimport EncounterJournal from \"./EncounterJournal\";\nimport SimpleCalendarIntegration from \"./integrations/SimpleCalendarIntegration\";\n\nfunction _getDateGroup() {\n  let dName;\n\n  if (SimpleCalendarIntegration.IsEnabled()) {\n    dName = `D${SimpleCalendarIntegration\n      .GetCurrentDateToString()\n      .replace(/ /g, \"\")}`;\n  } else {\n    let d = new Date().toISOString();\n    dName = `D${d.substring(0, 10).replace(/-/g, \"\")}`;\n  }\n\n  return dName;\n}\n\nfunction _simpleCalendarName() {\n  let dName;\n\n  if (SimpleCalendarIntegration.IsEnabled()) {\n    dName = `${SimpleCalendarIntegration.GetCurrentDateToString()}`;\n  } else {\n    let d = new Date().toISOString();\n    dName = `${d.substring(0, 10)}`;\n  }\n  return dName;\n}\n\nasync function _getDataArticle() {\n  let article = await GetCampaignDataArticle();\n  let content = article.data.content.replace(\"<p>\", \"\").replace(\"</p>\", \"\");\n  return JSON.parse(content);\n}\n\nasync function _updateDataArticle(data) {\n  let article = await GetCampaignDataArticle();\n  await UpdateJournal(JSON.stringify(data), article);\n\n  const markup = Generate(data);\n\n  let campaignArticle = await GetCampaignArticle();\n\n  await UpdateJournal(markup, campaignArticle);\n}\n\nexport async function CampaignTrackNat1(actorName, flavor) {\n  const dName = _getDateGroup();\n\n  let data = await _getDataArticle();\n  if (!data.nat1[dName]) {\n    data.nat1[dName] = [];\n  }\n\n  data.nat1[dName].push({\n    date: new Date().toISOString(),\n    actorName: actorName,\n    flavor: flavor,\n    simpleCalendarName: _simpleCalendarName(),\n  });\n\n  _updateDataArticle(data);\n}\n\nexport async function CampaignTrackNat20(actorName, flavor) {\n  const dName = _getDateGroup();\n\n  let data = await _getDataArticle();\n  if (!data.nat20[dName]) {\n    data.nat20[dName] = [];\n  }\n\n  data.nat20[dName].push({\n    date: new Date().toISOString(),\n    actorName: actorName,\n    flavor: flavor,\n    simpleCalendarName: _simpleCalendarName(),\n  });\n\n  _updateDataArticle(data);\n}\n\nexport async function CampaignTrack(date) {\n  const dName = _getDateGroup();\n\n  let data = await _getDataArticle();\n\n  let currentEncounterStats = GetItemFromLocalStorage(STORAGE_NAME);\n\n  for (let i = 0; i < currentEncounterStats.combatants.length; i++) {\n    const combatant = currentEncounterStats.combatants[i];\n    if (combatant.type === \"character\") {\n      for (let j = 0; j < combatant.kills.length; j++) {\n        const event = combatant.kills[j];\n        if (!data.kills[dName]) {\n          data.kills[dName] = [];\n        }\n        data.kills[dName].push({\n          actorId: combatant.id,\n          tokenName: event.tokenName,\n          actorName: combatant.name,\n          date: date,\n          simpleCalendarName: _simpleCalendarName(),\n        });\n      }\n    }\n  }\n\n  for (let i = 0; i < currentEncounterStats.combatants.length; i++) {\n    const combatant = currentEncounterStats.combatants[i];\n    if (combatant.type === \"character\") {\n      for (let j = 0; j < combatant.events.length; j++) {\n        const event = combatant.events[j];\n        if (event.actionType === \"heal\") {\n          if (!data.heals[dName]) {\n            data.heals[dName] = [];\n          }\n          data.heals[dName].push({\n            actorId: combatant.id,\n            spellName: event.item.name ? event.item.name : null,\n            itemLink: event.item.itemLink ? event.item.itemLink : null,\n            damageTotal: event.damageTotal,\n            actorName: combatant.name,\n            date: date,\n            simpleCalendarName: _simpleCalendarName(),\n          });\n        }\n      }\n    }\n  }\n\n  _updateDataArticle(data);\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\CampaignTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\DataParsing.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ATTACK_DATA_TEMPLATE' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":23},{"ruleId":"prefer-const","severity":2,"message":"'result' is never reassigned. Use 'const' instead.","line":108,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":108,"endColumn":13,"fix":{"range":[2565,2776],"text":"const result = data.combatants.map((m) => {\n    return {\n      name: m.name,\n      min: m.summaryList.min,\n      max: m.summaryList.max,\n      avg: m.summaryList.avg,\n      total: m.summaryList.total,\n    };\n  });"}},{"ruleId":"prefer-const","severity":2,"message":"'maxDamage' is never reassigned. Use 'const' instead.","line":118,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":118,"endColumn":16,"fix":{"range":[2780,2883],"text":"const maxDamage = result.reduce(function (max, obj) {\n    return obj.total > max.total ? obj : max;\n  });"}},{"ruleId":"prefer-const","severity":2,"message":"'highestAvgDamage' is never reassigned. Use 'const' instead.","line":121,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":121,"endColumn":23,"fix":{"range":[2886,2992],"text":"const highestAvgDamage = result.reduce(function (max, obj) {\n    return obj.avg > max.avg ? obj : max;\n  });"}},{"ruleId":"prefer-const","severity":2,"message":"'highestMaxDamage' is never reassigned. Use 'const' instead.","line":124,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":124,"endColumn":23,"fix":{"range":[2995,3101],"text":"const highestMaxDamage = result.reduce(function (max, obj) {\n    return obj.max > max.max ? obj : max;\n  });"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import MidiQol from \"./parsers/MidiQol\";\nimport {\n  ROLL_HOOK,\n  ATTACK_DATA_TEMPLATE,\n  MODULE_ID,\n  OPT_TOGGLE_CAMPAIGN_TRACKING,\n} from \"./Settings\";\nimport { CampaignTrackNat1, CampaignTrackNat20 } from \"./CampaignManager\";\n\nexport async function AddDiceRoll(data, type) {\n  if (game.settings.get(`${MODULE_ID}`, `${OPT_TOGGLE_CAMPAIGN_TRACKING}`)) {\n    let rollResult;\n\n    switch (type) {\n      case ROLL_HOOK.MIDI_QOL:\n        rollResult = await MidiQol.RollCheck(data);\n        break;\n      default:\n        return;\n    }\n\n    if (rollResult) {\n      if (rollResult.isCritical) {\n        CampaignTrackNat20(rollResult.name, rollResult.flavor);\n      }\n\n      if (rollResult.isFumble) {\n        CampaignTrackNat1(rollResult.name, rollResult.flavor);\n      }\n    }\n  }\n}\n\nexport function _getTopStats(data) {\n  let mostKills = 0;\n  let mostHealing = 0;\n  let mostSupportActions = 0;\n  let mostBattlefieldActions = 0;\n\n  mostKills = data.combatants\n    .map((m) => {\n      return {\n        name: m.name,\n        total: m.kills.length,\n      };\n    })\n    .reduce(function (max, obj) {\n      return obj.total > max.total ? obj : max;\n    });\n\n  mostHealing = data.combatants\n    .map((m) => {\n      return {\n        name: m.name,\n        total: m.events.filter((f) => {\n          return f.actionType === \"heal\";\n        }).length,\n      };\n    })\n    .reduce(function (max, obj) {\n      return obj.total > max.total ? obj : max;\n    });\n\n  mostSupportActions = data.combatants\n    .map((m) => {\n      return {\n        name: m.name,\n        total: m.events.filter((f) => {\n          return f.actionType === \"save\" || f.actionType === \"heal\";\n        }).length,\n      };\n    })\n    .reduce(function (max, obj) {\n      return obj.total > max.total ? obj : max;\n    });\n\n  mostBattlefieldActions = data.combatants\n    .map((m) => {\n      return {\n        name: m.name,\n        total: m.events.filter((f) => {\n          return f.actionType === \"other\";\n        }).length,\n      };\n    })\n    .reduce(function (max, obj) {\n      return obj.total > max.total ? obj : max;\n    });\n\n  let mostDamageInOneTurn = data.combatants.map((m) => {\n    if (m.roundSummary.totals.length === 0) {\n      return {\n        name: \"None\",\n        details: 0,\n      };\n    }\n    return {\n      name: m.name,\n      details: m.roundSummary.totals.reduce(function (max, obj) {\n        return obj.damageTotal > max.damageTotal ? obj : max;\n      }),\n    };\n  });\n  mostDamageInOneTurn = mostDamageInOneTurn.reduce((a, b) =>\n    a.details.damageTotal > b.details.damageTotal ? a : b\n  );\n\n  let result = data.combatants.map((m) => {\n    return {\n      name: m.name,\n      min: m.summaryList.min,\n      max: m.summaryList.max,\n      avg: m.summaryList.avg,\n      total: m.summaryList.total,\n    };\n  });\n\n  let maxDamage = result.reduce(function (max, obj) {\n    return obj.total > max.total ? obj : max;\n  });\n  let highestAvgDamage = result.reduce(function (max, obj) {\n    return obj.avg > max.avg ? obj : max;\n  });\n  let highestMaxDamage = result.reduce(function (max, obj) {\n    return obj.max > max.max ? obj : max;\n  });\n\n  return {\n    maxDamage: `${maxDamage.name}<br />${maxDamage.total}`,\n    mostDamageInOneTurn: `${mostDamageInOneTurn.name}<br />${mostDamageInOneTurn.details.damageTotal}`,\n    highestAvgDamage: `${highestAvgDamage.name}<br />${highestAvgDamage.avg}`,\n    highestMaxDamage: `${highestMaxDamage.name}<br />${highestMaxDamage.max}`,\n    mostKills: `${mostKills.name}<br />${mostKills.total}`,\n    mostHealing: `${mostHealing.name}<br />${mostHealing.total}`,\n    mostSupportActions: `${mostSupportActions.name}<br />${mostSupportActions.total}`,\n    mostBattlefieldActions: `${mostBattlefieldActions.name}<br />${mostBattlefieldActions.total}`,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\EncounterJournal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\Folder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\Handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrackKill' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MODULE_ID' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OPT_ENABLE_AOE_DAMAGE' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OPT_TOGGLE_CAMPAIGN_TRACKING' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ResetTemplateHealthCheck' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1306,1309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1306,1309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import EncounterJournal from \"./EncounterJournal\";\nimport TrackKill from \"./parsers/TrackKill\";\nimport {\n  ROLL_HOOK,\n  MODULE_ID,\n  OPT_ENABLE_AOE_DAMAGE,\n  OPT_TOGGLE_CAMPAIGN_TRACKING,\n} from \"./Settings\";\nimport { ResetTemplateHealthCheck, IsInCombat } from \"./Utils\";\nimport { CampaignTrackNat1, CampaignTrackNat20 } from \"./CampaignManager\";\nimport Stat from \"./Stat\";\nimport { EncounterMidiWorkflow } from \"./types/globals\";\n\nexport async function OnTrackDiceRoll(data): Promise<void> {\n  if (data !== undefined) {\n    if (data.data.roll !== undefined) {\n      if (data.roll.dice[0].faces === 20) {\n        if (\n          data.roll.dice[0].results.filter((f) => {\n            return f.active;\n          })[0].result === 1\n        ) {\n          CampaignTrackNat1(data.data.speaker.alias, data.data.flavor);\n        }\n\n        if (\n          data.roll.dice[0].results.filter((f) => {\n            return f.active;\n          })[0].result === 20\n        ) {\n          CampaignTrackNat20(data.data.speaker.alias, data.data.flavor);\n        }\n      }\n    }\n  }\n}\n\nexport async function OnUpdateCombat(currentRound: number): Promise<void> {\n  if (!currentRound) return;\n  const stat = new Stat();\n\n  stat.UpdateRound(currentRound);\n\n  await stat.Save();\n}\n\nexport async function OnRenderCombatTracker(data: any): Promise<void> {\n  if (!data.hasCombat) return;\n  const stat = new Stat();\n\n  const combatantsList = data.combat.combatants;\n  for (const element of combatantsList) {\n    const actorId = element.actorId;\n    const tokenId = element.tokenId;\n    stat.AddCombatant(game.actors.get(actorId), tokenId);\n  }\n  await stat.Save();\n}\n\nexport async function OnCreateCombat(combat: Combat): Promise<void> {\n  const encounterId = combat.id;\n  if (!encounterId) return;\n  const stat = new Stat(encounterId);\n\n  EncounterJournal.CreateJournalEntryPage(encounterId);\n  await stat.Save();\n}\n\nexport async function OnDeleteCombat(): Promise<void> {\n  /*if (game.settings.get(`${MODULE_ID}`, `${OPT_TOGGLE_CAMPAIGN_TRACKING}`)) {\n    const date = new Date();\n    await CampaignTrack(date.toISOString());\n  }*/\n  const stat = new Stat();\n  stat.Delete();\n}\n\nexport async function OnCreateChatMessage(attackData): Promise<void> {\n  if (!IsInCombat()) return;\n  AddAttack(attackData, ROLL_HOOK.DEFAULT);\n}\n\nexport async function OnMidiRollComplete(\n  workflow: EncounterMidiWorkflow\n): Promise<void> {\n  if (!IsInCombat()) return;\n  const stat = new Stat();\n  stat.AddAttack(workflow, stat.currentRound);\n  stat.Save();\n}\n\nexport async function OnUpdateHealth(actor: Actor): Promise<void> {\n  if (!IsInCombat()) return;\n  const stat = new Stat();\n  stat.UpdateHealth(actor);\n  stat.Save();\n}\n\nexport async function OnTrackKill(targetName, tokenId): Promise<void> {\n  if (!IsInCombat()) return;\n  const stat = new Stat();\n  stat.AddKill(targetName, tokenId);\n  stat.Save();\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\Hooks.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MODULE_ID' is defined but never used.","line":2,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OPT_ENABLE_AOE_DAMAGE' is defined but never used.","line":3,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OPT_TOGGLE_CAMPAIGN_TRACKING' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnCreateChatMessage' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnCreateMeasuredTemplate' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnTrackDiceRoll' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arg2' is defined but never used.","line":54,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arg3' is defined but never used.","line":54,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":57,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arg2' is defined but never used.","line":57,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arg3' is defined but never used.","line":57,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arg3' is defined but never used.","line":60,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":69}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  MODULE_ID,\n  OPT_ENABLE_AOE_DAMAGE,\n  OPT_TOGGLE_CAMPAIGN_TRACKING,\n} from \"./Settings\";\nimport {\n  OnRenderCombatTracker,\n  OnCreateCombat,\n  OnDeleteCombat,\n  OnCreateChatMessage,\n  OnUpdateCombat,\n  OnMidiRollComplete,\n  OnUpdateHealth,\n  OnCreateMeasuredTemplate,\n  OnTrackKill,\n  OnTrackDiceRoll,\n} from \"./Handlers\";\nimport MidiQol from \"./parsers/MidiQol\";\nimport { IsInCombat } from \"./Utils\";\n\nconst SOCKET_NAME = \"module.fvtt-encounter-stats\";\n\nfunction _setupSockerListeners() {\n  game.socket.on(SOCKET_NAME, function (payload) {\n    switch (payload.event) {\n      case \"updateActor\":\n        OnUpdateHealth(payload.data);\n        break;\n      case \"midi-qol.RollComplete\":\n        OnMidiRollComplete(MidiQol.ParseWorkflow(payload.data));\n        //OnMidiRollComplete(payload.data);\n        break;\n    }\n  });\n}\n\nfunction updateActorToken(data, diff) {\n  if (IsInCombat()) {\n    if (!data.hasPlayerOwner && diff.system?.attributes?.hp?.value === 0) {\n      OnTrackKill(data.name, game.combat.current.tokenId);\n    }\n  }\n  if (diff.system?.attributes?.hp) {\n    OnUpdateHealth(data);\n  }\n}\n\nexport async function SetupHooks() {\n  if (game.user.isGM) {\n    _setupSockerListeners();\n    window.Hooks.on(\"renderCombatTracker\", async function (arg1, arg2, data) {\n      OnRenderCombatTracker(data);\n    });\n    window.Hooks.on(\"createCombat\", async function (data, arg2, arg3) {\n      OnCreateCombat(data);\n    });\n    window.Hooks.on(\"deleteCombat\", async function (data, arg2, arg3) {\n      OnDeleteCombat();\n    });\n    window.Hooks.on(\"updateCombat\", async function (arg1, data, arg3) {\n      OnUpdateCombat(data.round);\n    });\n\n    window.Hooks.on(\"updateActor\", async function (data, diff) {\n      updateActorToken(data, diff);\n    });\n\n    window.Hooks.on(\"updateToken\", async function (data, diff) {\n      updateActorToken(data, diff);\n    });\n\n    if (game.modules.get(\"midi-qol\")?.active) {\n      window.Hooks.on(\"midi-qol.RollComplete\", async function (workflow) {\n        OnMidiRollComplete(MidiQol.ParseWorkflow(workflow));\n      });\n    }\n\n    /* else {\n      window.Hooks.on(\n        \"createChatMessage\",\n        async function (data, options, user) {\n          OnCreateChatMessage(data);\n        }\n      );\n    }*/\n\n    /*if (game.settings.get(`${MODULE_ID}`, `${OPT_TOGGLE_CAMPAIGN_TRACKING}`)) {\n      window.Hooks.on(\n        \"createChatMessage\",\n        async function (data, options, user) {\n          if (!data?.user?.isGM) {\n            OnTrackDiceRoll(data);\n          }\n        }\n      );\n    }\n  } else {\n    /*window.Hooks.on(\"updateActor\", async function (data, diff) {\n      if (diff.data?.attributes?.hp) {\n        game.socket.emit(SOCKET_NAME, {\n          event: \"updateActor\",\n          data: data,\n        });\n      }\n    });\n    if (game.modules.get(\"midi-qol\")?.active) {\n      window.Hooks.on(\"midi-qol.RollComplete\", async function (workflow) {\n        game.socket.emit(SOCKET_NAME, {\n          event: \"midi-qol.RollComplete\",\n          data: MidiQol.ParseWorkflow(workflow),\n        });\n      });\n    }*/\n  } else {\n    /*window.Hooks.on(\"updateActor\", async function (data, diff) {\n      if (diff.data?.attributes?.hp) {\n        game.socket.emit(SOCKET_NAME, {\n          event: \"updateActor\",\n          data: data,\n        });\n      }\n    });*/\n    if (game.modules.get(\"midi-qol\")?.active) {\n      window.Hooks.on(\"midi-qol.RollComplete\", async function (workflow) {\n        game.socket.emit(SOCKET_NAME, {\n          event: \"midi-qol.RollComplete\",\n          data: MidiQol.ParseWorkflow(workflow),\n        });\n      });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\LocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\ModuleSettings.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``${MODULE_ID}`,·`${OPT_ENABLE_JOURNAL_NOTIFICATION}`,` with `⏎······`${MODULE_ID}`,⏎······`${OPT_ENABLE_JOURNAL_NOTIFICATION}`,⏎·····`","line":44,"column":28,"nodeType":null,"messageId":"replace","endLine":44,"endColumn":81,"fix":{"range":[1379,1432],"text":"\n      `${MODULE_ID}`,\n      `${OPT_ENABLE_JOURNAL_NOTIFICATION}`,\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······name:·game.i18n.format(\"FVTTEncounterStats.opt_notification_created_name\"` with `········name:·game.i18n.format(⏎··········\"FVTTEncounterStats.opt_notification_created_name\"⏎········`","line":45,"column":1,"nodeType":null,"messageId":"replace","endLine":45,"endColumn":80,"fix":{"range":[1435,1514],"text":"        name: game.i18n.format(\n          \"FVTTEncounterStats.opt_notification_created_name\"\n        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `········`","line":46,"column":1,"nodeType":null,"messageId":"replace","endLine":46,"endColumn":7,"fix":{"range":[1517,1523],"text":"        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":47,"column":7,"nodeType":null,"messageId":"insert","endLine":47,"endColumn":7,"fix":{"range":[1545,1545],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······` with `········`","line":48,"column":1,"nodeType":null,"messageId":"replace","endLine":48,"endColumn":7,"fix":{"range":[1559,1565],"text":"        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":49,"column":1,"nodeType":null,"messageId":"insert","endLine":49,"endColumn":1,"fix":{"range":[1581,1581],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `}` with `··}⏎····`","line":50,"column":5,"nodeType":null,"messageId":"replace","endLine":50,"endColumn":6,"fix":{"range":[1606,1607],"text":"  }\n    "}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"import {\n  MODULE_ID,\n  OPT_ENABLE,\n  OPT_ENABLE_AOE_DAMAGE,\n  OPT_REPORT_BUG,\n  OPT_ENABLE_JOURNAL_NOTIFICATION,\n  OPT_TOGGLE_CAMPAIGN_TRACKING,\n  OPT_ENABLE_SIMPLE_CALENDAR_INTEGRATION,\n} from \"./Settings\";\nimport { ConfigPanel } from \"./panels/ConfigPanel\";\n\nclass ModuleSettings {\n  /**\n   * Register all module settings\n   * @public\n   * @return {void}\n   */\n  static Register(): void {\n    game.settings.register(`${MODULE_ID}`, `${OPT_ENABLE}`, {\n      name: game.i18n.format(\"FVTTEncounterStats.opt_enable_name\"),\n      hint: game.i18n.format(\"FVTTEncounterStats.opt_enable_hint\"),\n      scope: \"world\",\n      config: true,\n      default: true,\n      type: Boolean,\n    });\n    game.settings.register(`${MODULE_ID}`, `${OPT_ENABLE_AOE_DAMAGE}`, {\n      name: game.i18n.format(\"FVTTEncounterStats.enable_aoe_damage_name\"),\n      hint: game.i18n.format(\"FVTTEncounterStats.enable_aoe_damage_hint\"),\n      scope: \"world\",\n      config: true,\n      default: false,\n      type: Boolean,\n      onChange: () => window.location.reload(),\n    });\n    game.settings.registerMenu(`${MODULE_ID}`, `${OPT_REPORT_BUG}`, {\n      name: game.i18n.format(\"FVTTEncounterStats.config.debug\"),\n      label: game.i18n.format(\"FVTTEncounterStats.config.debug\"),\n      icon: \"fas fa-bug\",\n      scope: \"world\",\n      type: ConfigPanel,\n      restricted: true,\n    });\n    game.settings.register(`${MODULE_ID}`, `${OPT_ENABLE_JOURNAL_NOTIFICATION}`, {\n      name: game.i18n.format(\"FVTTEncounterStats.opt_notification_created_name\"),\n      scope: \"world\",\n      config: true,\n      default: false,\n      type: Boolean,\n    });\n    game.settings.register(`${MODULE_ID}`, `${OPT_TOGGLE_CAMPAIGN_TRACKING}`, {\n      name: game.i18n.format(\n        \"FVTTEncounterStats.opt_toggle_campaign_tracking_name\"\n      ),\n      hint: game.i18n.format(\n        \"FVTTEncounterStats.opt_toggle_campaign_tracking_hint\"\n      ),\n      scope: \"world\",\n      config: true,\n      default: true,\n      type: Boolean,\n    });\n    game.settings.register(\n      `${MODULE_ID}`,\n      `${OPT_ENABLE_SIMPLE_CALENDAR_INTEGRATION}`,\n      {\n        name: game.i18n.format(\n          \"FVTTEncounterStats.opt_enable_simple_calendar_integration_name\"\n        ),\n        hint: game.i18n.format(\n          \"FVTTEncounterStats.opt_enable_simple_calendar_integration_hint\"\n        ),\n        scope: \"world\",\n        config: true,\n        default: true,\n        type: Boolean,\n      }\n    );\n  }\n}\n\nexport default ModuleSettings;\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\Settings.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Insert `;`","line":70,"column":2,"nodeType":null,"messageId":"insert","endLine":70,"endColumn":2,"fix":{"range":[1555,1555],"text":";"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"export const MODULE_NAME = \"FVTT Encounter Stats\";\nexport const MODULE_ID = \"fvtt-encounter-stats\";\n\nexport const STORAGE_NAME = \"fvtt-encounter-stats-data\";\nexport const STORAGE_NAME_CAMPAIGN_DATA =\n  \"do-not-delete-fvtt-encounter-stats-data-campaign\";\nexport const STORAGE_NAME_CAMPAIGN_ID = \"Campaign Statistics\";\n\nexport const OPT_ENABLE = \"enable\";\nexport const OPT_ENABLE_AOE_DAMAGE = \"enable_aoe_damage\";\nexport const OPT_ENABLE_JOURNAL_NOTIFICATION = \"enable_journal_notification\";\nexport const OPT_TOGGLE_CAMPAIGN_TRACKING = \"toggle_campaign_tracking_name\";\nexport const OPT_ENABLE_SIMPLE_CALENDAR_INTEGRATION =\n  \"enable_simple_calendar_integration\";\n\nexport const OPT_REPORT_BUG = \"report_bug\";\n\nexport const ROLL_HOOK = {\n  MIDI_QOL: \"midi-qol\",\n  DEFAULT: \"default\",\n};\n\nexport const ATTACKTYPES = {\n  INFO: \"info\",\n  ATTACK: \"attack\",\n  DAMAGE_FORMULA: \"damage-formula\",\n  DAMAGE: \"damage\",\n  NONE: \"none\",\n};\n\nexport const ATTACK_DATA_TEMPLATE = {\n  id: null,\n  actionType: null,\n  round: null,\n  tokenId: null,\n  actorId: null,\n  advantage: false,\n  isCritical: false,\n  isFumble: false,\n  disadvantage: false,\n  attackTotal: 0,\n  damageTotal: 0,\n  item: {\n    name: null,\n    itemLink: null,\n  },\n};\n\nexport const HEALTH_DATA_TEMPLATE = {\n  id: null,\n  round: null,\n  tokenId: null,\n  actorId: null,\n  max: 0,\n  diff: 0,\n  previous: 0,\n  current: 0,\n  isdamage: false,\n  isheal: false,\n};\n\nexport const KILLED_DATA_TEMPLATE = {\n  round: null,\n  tokenName: null,\n};\n\nexport const CombatantType = {\n  character: \"character\",\n  npc: \"npc\",\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\Stat.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4357,4360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4357,4360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Encounter, EncounterMidiWorkflow } from \"./types/globals\";\nimport Stat from \"./Stat\";\njest.mock(\"./StatManager\");\nimport { GetStat, RemoveStat, SaveStat } from \"./StatManager\";\nimport { actor } from \"./mockdata/actor\";\n\nconst encounter: Encounter = {\n  encounterId: \"t98gppsau45ypm3t\",\n  round: 1,\n  combatants: [],\n  top: {\n    maxDamage: \"\",\n    mostDamageInOneTurn: \"\",\n    highestAvgDamage: \"\",\n    highestMaxDamage: \"\",\n  },\n  templateHealthCheck: [],\n};\n\nconst encoutnerMidiWorkflow: EncounterMidiWorkflow = {\n  id: \"d75gppsau45ypm2m\",\n  actionType: \"mwak\",\n  actor: {\n    id: \"eMyoELkOwFNPGEK8\",\n  },\n  advantage: true,\n  isCritical: false,\n  isFumble: false,\n  disadvantage: false,\n  attackRoll: 0,\n  damageRoll: 0,\n  damageMultipleEnemiesTotal: 0,\n  workflowType: \"test\",\n  attackTotal: 12,\n  damageTotal: 0,\n  item: {\n    id: \"itemId\",\n    name: \"Flame Tongue Greatsword\",\n    link: \"@Compendium[dnd5e.items.WWb4vAmh18sMAxfY]{Flame Tongue Greatsword}\",\n    type: \"sword\",\n    img: \"itemImageUrl\",\n  },\n  enemyHit: [\n    {\n      name: \"Acolyte\",\n      tokenId: \"tokenId\",\n    },\n  ],\n};\n\ndescribe(\"Stat\", () => {\n  describe(\"If it is a new encounter\", () => {\n    let stat: Stat;\n    const encounterId = \"encounterId\";\n    beforeAll(() => {\n      stat = new Stat(encounterId);\n      RemoveStat.mockImplementation(() => true);\n      SaveStat.mockImplementation(() => true);\n    });\n\n    test(\"it returns true to hasEncounter\", () => {\n      expect(stat.hasEncounter).toBeTruthy();\n    });\n\n    test(\"it returns a blank Encounter\", () => {\n      expect(stat.encounter).toStrictEqual(<Encounter>{\n        encounterId: encounterId,\n        round: 1,\n        combatants: [],\n        top: {\n          maxDamage: \"\",\n          mostDamageInOneTurn: \"\",\n          highestAvgDamage: \"\",\n          highestMaxDamage: \"\",\n        },\n        templateHealthCheck: [],\n      });\n    });\n\n    test(\"it calls RemoveStat\", () => {\n      stat.Delete();\n      expect(RemoveStat).toBeCalled();\n    });\n\n    test(\"it calls SaveStat\", () => {\n      stat.Save();\n      expect(SaveStat).toBeCalled();\n    });\n\n    test(\"it Updates the Round correctly\", () => {\n      expect(stat.currentRound).toBe(1);\n      stat.UpdateRound(2);\n      expect(stat.currentRound).toBe(2);\n      stat.UpdateRound(2);\n      expect(stat.currentRound).toBe(2);\n      stat.UpdateRound(1);\n      expect(stat.currentRound).toBe(1);\n    });\n\n    describe(\"Does its parsing work correctly\", () => {\n      test(\"it returns true to correct IsValidRollEvent\", () => {\n        expect(stat.IsValidRollEvent(\"mwak\")).toBeTruthy();\n      });\n      test(\"it returns false to correct IsValidRollEvent\", () => {\n        expect(stat.IsValidRollEvent(\"mwaks\")).toBeFalsy();\n      });\n\n      test(\"it returns true to correct IsValidAttack\", () => {\n        expect(stat.IsValidAttack(\"mwak\")).toBeTruthy();\n      });\n      test(\"it returns false to correct IsValidAttack\", () => {\n        expect(stat.IsValidAttack(\"heal\")).toBeFalsy();\n      });\n\n      test(\"it returns true to correct IsHealingSpell\", () => {\n        expect(stat.IsHealingSpell(\"heal\")).toBeTruthy();\n      });\n      test(\"it returns false to correct IsHealingSpell\", () => {\n        expect(stat.IsHealingSpell(\"mwak\")).toBeFalsy();\n      });\n\n      test(\"it returns true to correct IsValidCombatant\", () => {\n        expect(stat.IsValidCombatant(\"character\")).toBeTruthy();\n      });\n      test(\"it returns false to correct IsValidCombatant\", () => {\n        expect(stat.IsValidCombatant(\"characters\")).toBeFalsy();\n      });\n\n      test(\"it returns true to correct IsNPC\", () => {\n        expect(stat.IsNPC(\"npc\")).toBeTruthy();\n      });\n      test(\"it returns false to correct IsNPC\", () => {\n        expect(stat.IsNPC(\"character\")).toBeFalsy();\n      });\n    });\n  });\n\n  describe(\"If it pulls from localstorage\", () => {\n    let stat: Stat;\n    beforeAll(() => {\n      GetStat.mockImplementation(() => encounter);\n      stat = new Stat();\n    });\n\n    test(\"it returns true to hasEncounter\", () => {\n      expect(stat.hasEncounter).toBeTruthy();\n    });\n\n    test(\"it returns a Encounter type\", () => {\n      expect(stat.encounter.encounterId).toBe(\"t98gppsau45ypm3t\");\n    });\n  });\n\n  describe(\"If you add a new combatant\", () => {\n    let stat: Stat;\n    const encounterId = \"encounterId\";\n    beforeAll(() => {\n      (global as any).canvas = {\n        tokens: {\n          get: jest.fn().mockReturnValue({\n            img: \"testImageUrl\",\n          }),\n        },\n      };\n      stat = new Stat(encounterId);\n    });\n\n    test(\"it shows the Encounter has one combatant\", () => {\n      stat.AddCombatant(actor, \"tokenId\");\n      expect(stat.encounter.combatants.length).toBe(1);\n    });\n\n    test(\"you can get the combatant by actor id\", () => {\n      stat.AddCombatant(actor, \"tokenId\");\n      expect(stat.encounter.combatants.length).toBe(1);\n      expect(stat.GetCombatantStats(\"eMyoELkOwFNPGEK8\")?.id).toBe(\n        \"eMyoELkOwFNPGEK8\"\n      );\n    });\n\n    test(\"you can get the combatant by actor id\", () => {\n      stat.AddCombatant(actor, \"tokenId\");\n      expect(stat.encounter.combatants.length).toBe(1);\n      expect(stat.GetCombatantStatsByTokenId(\"tokenId\")?.id).toBe(\n        \"eMyoELkOwFNPGEK8\"\n      );\n    });\n\n    describe(\"If you add a new Attack\", () => {\n      test(\"you can get the combatant by actor id\", () => {\n        stat.AddCombatant(actor, \"tokenId\");\n        stat.AddAttack(encoutnerMidiWorkflow);\n        expect(stat.encounter.combatants.length).toBe(1);\n        expect(stat.GetCombatantStats(\"eMyoELkOwFNPGEK8\")?.events.length).toBe(\n          1\n        );\n      });\n    });\n\n    describe(\"If you add a new Kill\", () => {\n      test(\"you can see the kill added\", () => {\n        stat.AddCombatant(actor, \"tokenId\");\n        stat.AddKill(\"Acolyte\", \"tokenId\");\n        expect(stat.encounter.combatants.length).toBe(1);\n        expect(stat.GetCombatantStats(\"eMyoELkOwFNPGEK8\")?.kills.length).toBe(\n          1\n        );\n      });\n    });\n\n    describe(\"If you update Health\", () => {\n      test(\"you can see the kill added\", () => {\n        stat.AddCombatant(actor, \"tokenId\");\n        stat.UpdateHealth({\n          id: \"eMyoELkOwFNPGEK8\",\n          system: {\n            attributes: {\n              hp: {\n                value: 60,\n                max: 100,\n              },\n            },\n          },\n        });\n        expect(stat.encounter.combatants.length).toBe(1);\n        expect(stat.GetCombatantStats(\"eMyoELkOwFNPGEK8\")?.kills.length).toBe(\n          1\n        );\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\Stat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\StatManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\Template.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'markup' is never reassigned. Use 'const' instead.","line":344,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":344,"endColumn":13,"fix":{"range":[12429,12532],"text":"const markup = `\n  <li class=\"item flexrow\">\n    <div class=\"item-name\">${kill.tokenName}</div>\n  </li>`;"}},{"ruleId":"prefer-const","severity":2,"message":"'markup' is never reassigned. Use 'const' instead.","line":353,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":353,"endColumn":13,"fix":{"range":[12591,12744],"text":"const markup = `\n  <li class=\"item flexrow\">\n    <div class=\"item-name\">${event.current} (${event.isheal ? \"+\" : \"-\"}${\n    event.diff\n  })</div>\n  </li>`;"}},{"ruleId":"prefer-const","severity":2,"message":"'markup' is never reassigned. Use 'const' instead.","line":364,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":364,"endColumn":13,"fix":{"range":[12803,12909],"text":"const markup = `\n  <li class=\"item flexrow\">\n    <div class=\"item-name\">${event.damageTotal}</div>\n  </li>`;"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import Stat from \"./Stat\";\n\nexport function Generate(data) {\n  return `\n  <div class=\"fvtt-enc-stats\">\n    <hr />\n    <div class=\"fvtt-enc-stats_top\">\n      <div class=\"fvtt-enc-stats_actor_statlist flexrow\">\n        <div class=\"fvtt-enc-stats_actor_stat\">\n          <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n            \"FVTTEncounterStats.template.most_damage_overall\"\n          )}</div>\n          <div class=\"fvtt-enc-stats_actor_stat-value\">${\n            data.top.maxDamage\n          }</div>\n        </div>\n        <div class=\"fvtt-enc-stats_actor_stat\">\n          <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n            \"FVTTEncounterStats.template.most_damage_per_turn\"\n          )}</div>\n          <div class=\"fvtt-enc-stats_actor_stat-value\">${\n            data.top.mostDamageInOneTurn\n          }</div>\n        </div>\n        <div class=\"fvtt-enc-stats_actor_stat\">\n          <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n            \"FVTTEncounterStats.template.highest_average_damage\"\n          )}</div>\n          <div class=\"fvtt-enc-stats_actor_stat-value\">${\n            data.top.highestAvgDamage\n          }</div>\n        </div>\n        <div class=\"fvtt-enc-stats_actor_stat\">\n          <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n            \"FVTTEncounterStats.template.highest_damage_in_1_hit\"\n          )}</div>\n          <div class=\"fvtt-enc-stats_actor_stat-value\">${\n            data.top.highestMaxDamage\n          }</div>\n        </div>\n      </div>\n    </div>\n    <hr />\n    <div class=\"fvtt-enc-stats_top\">\n      <div class=\"fvtt-enc-stats_actor_statlist flexrow\">\n        <div class=\"fvtt-enc-stats_actor_stat\">\n          <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n            \"FVTTEncounterStats.template.most_kills\"\n          )}</div>\n          <div class=\"fvtt-enc-stats_actor_stat-value\">${\n            data.top.mostKills\n          }</div>\n        </div>\n        <div class=\"fvtt-enc-stats_actor_stat\">\n          <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n            \"FVTTEncounterStats.template.most_healing\"\n          )}</div>\n          <div class=\"fvtt-enc-stats_actor_stat-value\">${\n            data.top.mostHealing\n          }</div>\n        </div>\n        <div class=\"fvtt-enc-stats_actor_stat\">\n          <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n            \"FVTTEncounterStats.template.most_support_actions\"\n          )}</div>\n          <div class=\"fvtt-enc-stats_actor_stat-value\">${\n            data.top.mostSupportActions\n          }</div>\n        </div>\n        <div class=\"fvtt-enc-stats_actor_stat\">\n          <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n            \"FVTTEncounterStats.template.battlefield_actions\"\n          )}</div>\n          <div class=\"fvtt-enc-stats_actor_stat-value\">${\n            data.top.mostBattlefieldActions\n          }</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"fvtt-enc-stats_combatants\">\n    <div>${data.combatants\n      .filter((f) => f.type === \"character\")\n      .map(function (combatant) {\n        return GenerateCombatant(combatant, data.round);\n      })\n      .join(\"\")}</div></div></div>\n  `;\n}\n\nfunction GenerateCombatant(combatant, numberOfRounds) {\n  return `\n  <div class=\"fvtt-enc-stats_combatant\" data-fvtt-id=\"${combatant.id}\">\n    <div class=\"fvtt-enc-stats_combatants_overview\">\n      <header class=\"fvtt-enc-stats_combatants_actor flexrow\">\n        <div class=\"fvtt-enc-stats_combatants_actor_image flexcol\">\n          <img src=\"${combatant.img}\" alt=\"${combatant.name}\" />\n        </div>\n        <div class=\"fvtt-enc-stats_actor_stats\">\n          <h1 class=\"fvtt-enc-stats_actor_stats_name\">${combatant.name}</h1>\n          <div class=\"fvtt-enc-stats_actor_statlist flexrow\">\n            <div class=\"fvtt-enc-stats_actor_stat\">\n              <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n                \"FVTTEncounterStats.template.startinghp\"\n              )}</div>\n              <div class=\"fvtt-enc-stats_actor_stat-value\">\n                <span>${combatant.hp}</span><span class=\"sep\">/</span><span>${\n    combatant.max\n  }</span></div>\n            </div>\n            <div class=\"fvtt-enc-stats_actor_stat\">\n              <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n                \"FVTTEncounterStats.template.finalhp\"\n              )}</div>\n              <div class=\"fvtt-enc-stats_actor_stat-value\">\n                <span>${\n                  combatant.health.length > 0\n                    ? combatant.health[combatant.health.length - 1].current\n                    : combatant.hp\n                }</span><span class=\"sep\">/</span><span>${\n    combatant.max\n  }</span></div>\n            </div>\n            <div class=\"fvtt-enc-stats_actor_stat\">\n              <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n                \"FVTTEncounterStats.template.ac\"\n              )}</div>\n              <div class=\"fvtt-enc-stats_actor_stat-value\"><span>${\n                combatant.ac\n              }</span></div>\n            </div>\n            <div class=\"fvtt-enc-stats_actor_stat\">\n              <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n                \"FVTTEncounterStats.template.damage_total\"\n              )}</div>\n              <div class=\"fvtt-enc-stats_actor_stat-value\"><span>${\n                combatant.summaryList.total\n              }</span></div>\n            </div>\n            <div class=\"fvtt-enc-stats_actor_stat\">\n              <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n                \"FVTTEncounterStats.template.min_damage\"\n              )}</div>\n              <div class=\"fvtt-enc-stats_actor_stat-value\"><span>${\n                combatant.summaryList.min\n              }</span></div>\n            </div>\n            <div class=\"fvtt-enc-stats_actor_stat\">\n              <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n                \"FVTTEncounterStats.template.max_damage\"\n              )}</div>\n              <div class=\"fvtt-enc-stats_actor_stat-value\"><span>${\n                combatant.summaryList.max\n              }</span></div>\n            </div>\n            <div class=\"fvtt-enc-stats_actor_stat\">\n              <div class=\"fvtt-enc-stats_actor_stat-key\">${game.i18n.format(\n                \"FVTTEncounterStats.template.avg_damage\"\n              )}</div>\n              <div class=\"fvtt-enc-stats_actor_stat-value\"><span>${\n                combatant.summaryList.avg\n              }</span></div>\n            </div>\n          </div>\n        </div>\n      </header>\n      ${GenerateRoundHtml(combatant, numberOfRounds)}      \n    </div>\n  </div>\n  `;\n}\nfunction GenerateRoundHtml(combatant, numberOfRounds) {\n  let markup = ``;\n  for (let index = 0; index < numberOfRounds; index++) {\n    const round = index + 1;\n    markup =\n      markup +\n      `\n    <div class=\"fvtt-enc-stats_title3\">${game.i18n.format(\n      \"FVTTEncounterStats.template.round\"\n    )} ${round}</div>\n    <section class=\"fvtt-enc-stats_combatants_data\">\n      <section class=\"fvtt-enc-stats_combatants_data_section fvtt-enc-stats_combatants_data_section-health\">\n        <div class=\"flexcol\">\n          <ol class=\"items-list flexcol\">\n            <li class=\"items-header flexrow\">\n              <div class=\"item-name\">${game.i18n.format(\n                \"FVTTEncounterStats.template.kills\"\n              )}</div>\n            </li>\n            <ol class=\"item-list\">\n              ${combatant.kills\n                .filter((f) => {\n                  return f.round === round;\n                })\n                .map(function (kill) {\n                  return GenerateKillRow(kill);\n                })\n                .join(\"\")}\n                    \n            </ol>\n          </ol>\n          <ol class=\"items-list flexcol\">\n            <li class=\"items-header flexrow\">\n              <div class=\"item-name\">${game.i18n.format(\n                \"FVTTEncounterStats.template.rounddmg\"\n              )}</div>\n            </li>\n            <ol class=\"item-list\">\n              ${combatant.roundSummary.totals\n                .filter((f) => {\n                  return f.round === round.toString();\n                })\n                .map(function (event) {\n                  return GenerateRoundRow(event);\n                })\n                .join(\"\")}\n            </ol>\n          </ol>\n          <ol class=\"items-list flexcol\">\n            <li class=\"items-header flexrow\">\n              <div class=\"item-name\">${game.i18n.format(\n                \"FVTTEncounterStats.template.health\"\n              )}</div>\n            </li>\n            <ol class=\"item-list\">\n              ${combatant.health\n                .filter((f) => {\n                  return f.round === round;\n                })\n                .map(function (event) {\n                  return GenerateHealtRow(event);\n                })\n                .join(\"\")}\n                    \n            </ol>\n          </ol>\n        </div>\n      </section>\n      <section class=\"fvtt-enc-stats_combatants_data_section fvtt-enc-stats_combatants_data_section-attacks\">\n        <div class=\"flexcol\">\n          <ol class=\"items-list flexcol\">\n            <li class=\"items-header flexrow\">\n              <div class=\"item-name item-weapon\">${game.i18n.format(\n                \"FVTTEncounterStats.template.weapon_spell_name\"\n              )}</div>\n              <div class=\"item-name\">${game.i18n.format(\n                \"FVTTEncounterStats.template.type\"\n              )}</div>\n              <div class=\"item-name\">${game.i18n.format(\n                \"FVTTEncounterStats.template.rolltype\"\n              )}</div>\n              <div class=\"item-name\">${game.i18n.format(\n                \"FVTTEncounterStats.template.attack_total\"\n              )}</div>\n              <div class=\"item-name\">${game.i18n.format(\n                \"FVTTEncounterStats.template.damage_total\"\n              )}</div>\n            </li>\n            <ol class=\"item-list\">\n              ${combatant.events\n                .filter((f) => {\n                  return f.round === round;\n                })\n                .map(function (event) {\n                  return GenerateAttackRow(event);\n                })\n                .join(\"\")}\n                    \n            </ol>\n          </ol>\n        </div>\n      </section>\n    </section>`;\n  }\n\n  return markup;\n}\n\nfunction GenerateAttackRow(event) {\n  return `\n  <li class=\"item flexrow\">\n    <div class=\"item-name item-weapon\">${\n      event.item.itemLink ? event.item.itemLink : event.item.name\n    }</div>\n    <div class=\"item-name\">${getAttackTypeFAIcon(event.actionType)}</div>\n    <div class=\"item-name\">${\n      event.advantage\n        ? \"advantage\"\n        : event.disadvantage\n        ? \"disadvantage\"\n        : \"normal\"\n    }</div>\n    <div class=\"item-name\">${event.attackTotal} ${\n    event.isCritical ? \" (c)\" : \"\"\n  }</div>\n    <div class=\"item-name ${getHealOrDamageClass(event.actionType)}\">${\n    event.damageTotal\n  }</div>\n  </li>`;\n}\n\nfunction getHealOrDamageClass(attackType) {\n  const stat = new Stat();\n  if (stat.IsHealingSpell(attackType)) return \"blue\";\n  if (stat.IsValidAttack(attackType)) return \"red\";\n}\n\nfunction getAttackTypeFAIcon(attackType) {\n  let iconName = \"dice-d20\";\n  let iconDescription = game.i18n.format(\n    \"FVTTEncounterStats.actiontypes.other\"\n  );\n  switch (attackType) {\n    case \"heal\":\n      iconName = \"heart\";\n      iconDescription = game.i18n.format(\"FVTTEncounterStats.actiontypes.heal\");\n      break;\n    case \"msak\":\n      iconName = \"scroll\";\n      iconDescription = game.i18n.format(\"FVTTEncounterStats.actiontypes.msak\");\n      break;\n    case \"rsak\":\n      iconName = \"scroll\";\n      iconDescription = game.i18n.format(\"FVTTEncounterStats.actiontypes.rsak\");\n      break;\n    case \"mwak\":\n      iconName = \"fist-raised\";\n      iconDescription = game.i18n.format(\"FVTTEncounterStats.actiontypes.mwak\");\n      break;\n    case \"rwak\":\n      iconName = \"fist-raised\";\n      iconDescription = game.i18n.format(\"FVTTEncounterStats.actiontypes.rwak\");\n      break;\n    case \"save\":\n      iconName = \"shield-alt\";\n      iconDescription = game.i18n.format(\"FVTTEncounterStats.actiontypes.save\");\n      break;\n  }\n\n  return `<i title=\"${iconDescription}\" class=\"fas fa-${iconName}\"></i>`;\n}\n\nfunction GenerateKillRow(kill) {\n  let markup = `\n  <li class=\"item flexrow\">\n    <div class=\"item-name\">${kill.tokenName}</div>\n  </li>`;\n\n  return markup;\n}\n\nfunction GenerateHealtRow(event) {\n  let markup = `\n  <li class=\"item flexrow\">\n    <div class=\"item-name\">${event.current} (${event.isheal ? \"+\" : \"-\"}${\n    event.diff\n  })</div>\n  </li>`;\n\n  return markup;\n}\n\nfunction GenerateRoundRow(event) {\n  let markup = `\n  <li class=\"item flexrow\">\n    <div class=\"item-name\">${event.damageTotal}</div>\n  </li>`;\n\n  return markup;\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\Utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ATTACKTYPES' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ATTACKTYPES } from \"./Settings\";\nimport { GetStat } from \"./StatManager\";\n\n/*export async function ChatType(data) {\n  if (data?.data?.content) {\n    let match = getItemId(data.data.content);\n    if (match) {\n      return ATTACKTYPES.INFO;\n    }\n  }\n\n  if (data._roll && data.data?.flags?.dnd5e) {\n    switch (data.data.flags.dnd5e.roll.type) {\n      case \"attack\":\n        return ATTACKTYPES.ATTACK;\n      case \"damage\":\n        return ATTACKTYPES.DAMAGE;\n    }\n  }\n\n  // If other forumla TODO: This will cause issues with translations\n  if (data.data?.flavor?.toLowerCase().indexOf(\"other formula\") > -1) {\n    return ATTACKTYPES.DAMAGE_FORMULA;\n  }\n  return ATTACKTYPES.NONE;\n}*/\n\nexport function IsInCombat() {\n  return GetStat();\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\integrations\\SimpleCalendarIntegration.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎··MODULE_ID,⏎··OPT_ENABLE_SIMPLE_CALENDAR_INTEGRATION,⏎` with `·MODULE_ID,·OPT_ENABLE_SIMPLE_CALENDAR_INTEGRATION·`","line":1,"column":9,"nodeType":null,"messageId":"replace","endLine":4,"endColumn":1,"fix":{"range":[8,64],"text":" MODULE_ID, OPT_ENABLE_SIMPLE_CALENDAR_INTEGRATION "}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  MODULE_ID,\n  OPT_ENABLE_SIMPLE_CALENDAR_INTEGRATION,\n} from \"../Settings\";\n\nexport default class SimpleCalendarIntegration {\n  static IsEnabled() {\n    return (\n      window.SimpleCalendar !== undefined &&\n      game.settings.get(\n        `${MODULE_ID}`,\n        `${OPT_ENABLE_SIMPLE_CALENDAR_INTEGRATION}`\n      )\n    );\n  }\n\n  static GetCurrentDate() {\n    return {\n      day: window.SimpleCalendar.api.getCurrentDay().name,\n      month: window.SimpleCalendar.api.getCurrentMonth().name,\n      year: `${\n        window.SimpleCalendar.api.getCurrentYear().numericRepresentation\n      } ${window.SimpleCalendar.api.getCurrentYear().postfix}`,\n    };\n  }\n\n  static GetCurrentDateToString() {\n    const d = this.GetCurrentDate();\n    return `${d.day} ${d.month} ${d.year}`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\parsers\\Default.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":7,"column":17,"nodeType":null,"messageId":"insert","endLine":7,"endColumn":17,"fix":{"range":[114,114],"text":","}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  nullChecks,\n  resetDamageIfAreaEffect,\n  GetItemData,\n  ChatType,\n  GetCombatantStats,\n  CombatantStats\n} from \"../Utils\";\nimport { ATTACKTYPES } from \"../Settings\";\n\nexport default async function Default(stat, attackData, data) {\n  const combatantStat = GetCombatantStats(stat, data.data.speaker.actor);\n  if (!combatantStat) return;\n  const eventsLength = combatantStat.events.length;\n  attackData.actorId = data.data.speaker.actor;\n\n  const chatType = await ChatType(data);\n  if (chatType === ATTACKTYPES.NONE) return;\n\n  if (chatType === ATTACKTYPES.INFO) {\n    attackData = await GetItemData(\n      attackData,\n      attackData.actorId,\n      data.data.content\n    );\n\n    combatantStat.events.push(attackData);\n  }\n\n  if (\n    chatType === ATTACKTYPES.ATTACK ||\n    chatType === ATTACKTYPES.DAMAGE ||\n    chatType === ATTACKTYPES.DAMAGE_FORMULA\n  ) {\n    attackData = combatantStat.events[combatantStat.events.length - 1];\n\n    if (chatType === ATTACKTYPES.ATTACK) {\n      attackData.attackTotal = data._roll.total;\n      attackData.advantage =\n        data._roll.options.advantageMode === 1 ? true : false;\n      attackData.disadvantage =\n        data._roll.options.advantageMode === -1 ? true : false;\n    }\n    if (\n      chatType === ATTACKTYPES.DAMAGE ||\n      chatType === ATTACKTYPES.DAMAGE_FORMULA\n    ) {\n      attackData.damageTotal = data._roll.total;\n      if (data._roll.options.critical != null) {\n        attackData.isCritical = data._roll.options.critical;\n      }\n    }\n  }\n\n  resetDamageIfAreaEffect(attackData, stat.templateHealthCheck.length > 1);\n\n  nullChecks(attackData);\n\n  CombatantStats(combatantStat);\n\n  return {\n    stat: stat,\n    isNewAttack: combatantStat.events.length > eventsLength,\n    attackData: attackData,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\parsers\\MidiQol.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\parsers\\MidiQol.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\scss.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\git\\foundryvtt-modules\\fvtt-encounter-stats\\scripts\\types\\globals.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]